# 2340. Minimum Adjacent Swaps to Make a Valid Array

## Problem Statement

> You are given a 0-indexed integer array nums. Swaps of adjacent elements are able to be performed on nums.
>
> A valid array meets the following conditions:
>
> - The largest element (any of the largest elements if there are multiple) is at the rightmost position in the array.
> - The smallest element (any of the smallest elements if there are multiple) is at the leftmost position in the array.
>
> Return the minimum swaps required to make nums a valid array.

> Constraints:
>
> - 1 <= nums.length <= 10<sup>5</sup>
> - 1 <= nums[i] <= 10<sup>5</sup>

## Examples

Example 1:

```
Input: nums = [3,4,5,5,3,1]
Output: 6
Explanation: Perform the following swaps:
- Swap 1: Swap the 3rd and 4th elements, nums is then [3,4,5,3,5,1].
- Swap 2: Swap the 4th and 5th elements, nums is then [3,4,5,3,1,5].
- Swap 3: Swap the 3rd and 4th elements, nums is then [3,4,5,1,3,5].
- Swap 4: Swap the 2nd and 3rd elements, nums is then [3,4,1,5,3,5].
- Swap 5: Swap the 1st and 2nd elements, nums is then [3,1,4,5,3,5].
- Swap 6: Swap the 0th and 1st elements, nums is then [1,3,4,5,3,5].
It can be shown that 6 swaps is the minimum swaps required to make a valid array.
```

Example 2:

```
Input: nums = [9]
Output: 0
Explanation: The array is already valid, so we return 0.
```

## Greedy Solution

```
Intuition:
* find first min from the left
* perform swaps till min is at left
* find first max from the right
* perform swaps till max is at right

        0  1  2  3  4  5
nums = [3, 4, 5, 5, 3, 1]

min_num = 1
min_idx = 5

* It will take 5 swaps for 1 to reach 0

        0  1  2  3  4  5
nums = [1, 3, 4, 5, 5, 3]      * swap

max_num = 5
max_idx = 4

* It will take 5 - 4 swaps for 5 to reach idx 5

                              0  1  2  3  4  5
* If we reverse the array => [3, 5, 5, 4, 3, 1]
                                 ^
* swaps = 1 (It takes 1 swap for 5 to reach idx 0)

i.e we can simply return min_idx + max_idx  (5 + 1)

Output:
6
```
